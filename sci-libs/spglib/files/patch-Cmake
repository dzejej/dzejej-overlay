--- a/python/CMakeLists.txt-2.4.0	2024-04-11 15:12:34.000000000 +0200
+++ b/python/CMakeLists.txt	2025-03-06 13:33:46.000000000 +0100
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.20...3.29)
+cmake_minimum_required(VERSION 3.25...3.29)
 
 #[=============================================================================[
 #                           Basic project definition                           #
@@ -8,15 +8,6 @@
 project(Spglib_Python
         LANGUAGES C
 )
-# Back-porting to PROJECT_IS_TOP_LEVEL to older cmake
-# TODO: Remove when requiring cmake >= 3.21
-if (NOT DEFINED Spglib_Python_IS_TOP_LEVEL)
-    if (CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
-        set(PROJECT_IS_TOP_LEVEL ON)
-    else ()
-        set(PROJECT_IS_TOP_LEVEL OFF)
-    endif ()
-endif ()
 
 set(CMAKE_C_STANDARD 11)
 set(CMAKE_C_STANDARD_REQUIRED ON)
@@ -37,46 +28,43 @@
 #                            Project configuration                            #
 ]=============================================================================]
 
+include(GNUInstallDirs)
+
 set(BUILD_SHARED_LIBS ${SPGLIB_SHARED_LIBS})
 
 #[=============================================================================[
-#                              External packages                              #
+#                                Public targets                                #
 ]=============================================================================]
 
-set(external_libs)
-include(FetchContent)
+# Running `find_package(Python)` early to be able to define target with `Python_add_library`
+find_package(Python 3.9 COMPONENTS REQUIRED Interpreter Development.Module NumPy)
+Python_add_library(Spglib_python MODULE WITH_SOABI)
+add_library(Spglib::python ALIAS Spglib_python)
+
+#[=============================================================================[
+#                              External packages                              #
+]=============================================================================]
 
 # Get Spglib if it's run as stand-alone project
-if (NOT Spglib_SOURCE_DIR)
-    if (CMAKE_VERSION VERSION_LESS 3.24)
-        # TODO: Use by default when minimum is CMake 3.24
-        find_package(Spglib CONFIG QUIET)
-        if (NOT Spglib_FOUND)
-            FetchContent_Declare(Spglib
-                    GIT_REPOSITORY https://github.com/spglib/spglib
-                    GIT_TAG develop
-            )
-            list(APPEND external_libs Spglib)
-        endif ()
-    else ()
-        FetchContent_Declare(Spglib
-                GIT_REPOSITORY https://github.com/spglib/spglib
-                GIT_TAG develop
-                FIND_PACKAGE_ARGS CONFIG
-        )
-        list(APPEND external_libs Spglib)
+if (NOT TARGET Spglib::symspg)
+    find_package(Spglib CONFIG)
+    if (NOT Spglib_FOUND)
+        message(STATUS "Using bundled spglib sources")
+        add_subdirectory(${PROJECT_SOURCE_DIR}/.. _deps/spglib-build)
     endif ()
 endif ()
-find_package(Python 3.8 COMPONENTS REQUIRED Interpreter Development.Module NumPy)
-FetchContent_MakeAvailable(${external_libs})
 
 #[=============================================================================[
 #                               Main definition                               #
 ]=============================================================================]
 
-Python_add_library(Spglib_python MODULE WITH_SOABI _spglib.c)
+# Define main target
 set_target_properties(Spglib_python PROPERTIES
         OUTPUT_NAME _spglib
+        INSTALL_RPATH "$<IF:$<BOOL:${APPLE}>,@loader_path,$ORIGIN>/${CMAKE_INSTALL_LIBDIR}"
+)
+target_sources(Spglib_python PRIVATE
+        _spglib.c
 )
 target_link_libraries(Spglib_python PRIVATE
         Spglib::symspg Python::NumPy
@@ -98,45 +86,35 @@
 )
 # On Windows make sure the dll files are in the build directory
 # https://stackoverflow.com/a/73550650
-if (CMAKE_IMPORT_LIBRARY_SUFFIX)
+if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.26)
+    # This form works when no files are specified
     add_custom_command(TARGET Spglib_python POST_BUILD
-            COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_RUNTIME_DLLS:Spglib_python> ${CMAKE_CURRENT_BINARY_DIR}/spglib/
+            COMMAND ${CMAKE_COMMAND} -E copy -t ${CMAKE_CURRENT_BINARY_DIR}/spglib/ $<TARGET_RUNTIME_DLLS:Spglib_python>
             COMMAND_EXPAND_LISTS
     )
+else ()
+    if(WIN32)
+        add_custom_command(TARGET Spglib_python POST_BUILD
+                COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_RUNTIME_DLLS:Spglib_python> ${CMAKE_CURRENT_BINARY_DIR}/spglib/
+                COMMAND_EXPAND_LISTS
+        )
+    endif ()
 endif ()
 
 #[=============================================================================[
 #                              Install or Export                              #
 ]=============================================================================]
 
-if (NOT Python_INSTALL_DIR)
-    if (SKBUILD)
-        # If built with scikit-build-core, let it handle the installation
-        set(Python_INSTALL_DIR ".")
-    else ()
-        # Otherwise try to install in current python executable's setup
-        set(Python_INSTALL_DIR ${Python_SITEARCH})
-    endif ()
-endif ()
-if (SPGLIB_INSTALL)
+if (NOT SKBUILD AND SPGLIB_INSTALL)
+    message(WARNING "Installing the python bindings outside of scikit-build-core environment is not supported.")
+elseif (SPGLIB_INSTALL)
     if (TARGET Spglib_symspg)
-        # If Spglib is not already installed on the system, install it in ${Python_INSTALL_DIR}
-        # TODO: Cmake forces to install PUBLIC_HEADER when defined
-        # https://gitlab.kitware.com/cmake/cmake/-/issues/24326
+        # For windows systems we need to also install a copy of the dll files
         install(TARGETS Spglib_symspg
-                LIBRARY DESTINATION ${Python_INSTALL_DIR}/spglib/lib COMPONENT Spglib_Runtime
-                NAMELINK_COMPONENT Spglib_Development
-                ARCHIVE DESTINATION ${Python_INSTALL_DIR}/spglib/lib COMPONENT Spglib_Development
-                PUBLIC_HEADER DESTINATION ${Python_INSTALL_DIR}/spglib/include COMPONENT Spglib_Development
-                RUNTIME DESTINATION ${Python_INSTALL_DIR}/spglib COMPONENT Spglib_Runtime
+                RUNTIME DESTINATION .
         )
     endif ()
     install(TARGETS Spglib_python
-            LIBRARY DESTINATION ${Python_INSTALL_DIR}/spglib COMPONENT Spglib_Runtime
+            LIBRARY DESTINATION .
     )
-
-    # Install spglib module to local python path
-    if (NOT SKBUILD)
-        install(DIRECTORY spglib/ DESTINATION ${Python_INSTALL_DIR}/spglib COMPONENT Spglib_Runtime)
-    endif ()
 endif ()
